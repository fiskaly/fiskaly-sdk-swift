// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name FiskalySDK
import FiskalySDK.Client
@_exported import FiskalySDK
import Foundation
import Swift
public class ResultCreateContext : Swift.Codable {
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public class ResultVersion : Swift.Codable {
  public var client: FiskalySDK.ClientVersion
  public var smaers: FiskalySDK.SMAERSVersion
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public class ClientVersion : Swift.Codable {
  public var version: Swift.String
  public var sourceHash: Swift.String
  public var commitHash: Swift.String
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public class SMAERSVersion : Swift.Codable {
  public var version: Swift.String
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public class ResultSelfTest : Swift.Codable {
  public var proxy: Swift.String
  public var backend: [Swift.String : Swift.String]
  public var smaers: Swift.String
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public class ResultConfig : Swift.Codable {
  public var context: Swift.String
  public var config: FiskalySDK.Config
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public class Config : Swift.Codable {
  public var debugLevel: Swift.Int
  public var debugFile: Swift.String
  public var clientTimeout: Swift.Int
  public var smaersTimeout: Swift.Int
  public var httpProxy: Swift.String
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public class ResultRequest : Swift.Codable {
  public var response: FiskalySDK.HttpResponse
  public var context: Swift.String?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public class HttpResponse : Swift.Codable {
  public var status: Swift.Int
  public var body: Swift.String
  public var headers: [Swift.String : [Swift.String]]
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct JsonRpcResponse<T> : Swift.Codable where T : Swift.Decodable, T : Swift.Encodable {
  public var jsonrpc: Swift.String
  public var id: Swift.String
  public var result: T?
  public var error: FiskalySDK.JsonRpcError?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public class FiskalyHttpClient {
  public init(apiKey: Swift.String? = "", apiSecret: Swift.String? = "", baseUrl: Swift.String, email: Swift.String? = "", password: Swift.String? = "", organizationId: Swift.String? = "", environment: Swift.String? = "", client: FiskalySDK.RequestClient = FiskalyRequestClient()) throws
  public func version() throws -> FiskalySDK.ResultVersion
  public func selfTest() throws -> FiskalySDK.ResultSelfTest
  public func config(debugLevel: Swift.Int?, debugFile: Swift.String?, clientTimeout: Swift.Int?, smaersTimeout: Swift.Int?, httpProxy: Swift.String?) throws -> FiskalySDK.Config
  public func echo(data: Swift.String) throws -> Swift.String
  public func request(method: Swift.String, path: Swift.String = "", query: [Swift.String : Any]? = nil, headers: [Swift.String : Swift.String]? = nil, body: Swift.String = "") throws -> FiskalySDK.HttpResponse
  @objc deinit
}
public struct JsonRpcError : Swift.Error, Swift.Codable {
  public var code: Swift.Int
  public var message: Swift.String
  public var data: FiskalySDK.ResultRequest?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension JsonRpcError : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
public class JsonRpcRequest : Swift.CustomStringConvertible {
  public var jsonrpc: Swift.String
  public var id: Swift.String
  public var method: Swift.String
  public var params: Any
  public var description: Swift.String {
    get
  }
  public init(method: Swift.String, params: Any)
  public func createString() -> Swift.String
  @objc deinit
}
public enum FiskalyError : Swift.Error {
  case sdkError(message: Swift.String)
}
public protocol RequestClient {
  func invoke(request: FiskalySDK.JsonRpcRequest) throws -> Swift.String
}
public struct FiskalyRequestClient : FiskalySDK.RequestClient {
  public init()
  public func invoke(request: FiskalySDK.JsonRpcRequest) throws -> Swift.String
}
